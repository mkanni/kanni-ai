apiVersion: v1
kind: Pod
metadata:
  name: log-test
  namespace: kanni-ai
  labels:
    app: log-test
spec:
  containers:
  - name: log-generator
    image: curlimages/curl:latest
    command: ["/bin/sh"]
    args:
      - -c
      - |
        echo "Testing minimal OTLP log sending..."
        
        # Send a test log via OTLP HTTP
        curl -X POST http://otel-collector-collector.kanni-ai.svc.cluster.local:4318/v1/logs \
        -H "Content-Type: application/json" \
        -d '{
          "resourceLogs": [
            {
              "resource": {
                "attributes": [
                  {"key": "service.name", "value": {"stringValue": "kanni-ai-test"}},
                  {"key": "service.version", "value": {"stringValue": "1.0.0"}}
                ]
              },
              "scopeLogs": [
                {
                  "logRecords": [
                    {
                      "timeUnixNano": "'$(date +%s000000000)'",
                      "severityText": "INFO",
                      "body": {"stringValue": "Test log message from kanni-ai application - minimal logging test"},
                      "attributes": [
                        {"key": "log.level", "value": {"stringValue": "info"}},
                        {"key": "component", "value": {"stringValue": "test"}}
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }'
        
        sleep 5
        
        # Send an error log (should pass filter)
        curl -X POST http://otel-collector-collector.kanni-ai.svc.cluster.local:4318/v1/logs \
        -H "Content-Type: application/json" \
        -d '{
          "resourceLogs": [
            {
              "resource": {
                "attributes": [
                  {"key": "service.name", "value": {"stringValue": "kanni-ai-test"}},
                  {"key": "service.version", "value": {"stringValue": "1.0.0"}}
                ]
              },
              "scopeLogs": [
                {
                  "logRecords": [
                    {
                      "timeUnixNano": "'$(date +%s000000000)'",
                      "severityText": "ERROR", 
                      "body": {"stringValue": "Test ERROR log - this should appear in Grafana Loki due to error filter"},
                      "attributes": [
                        {"key": "log.level", "value": {"stringValue": "error"}},
                        {"key": "component", "value": {"stringValue": "test"}}
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }'
        
        echo "Test logs sent! Check Grafana Loki in a few seconds."
        sleep 30
  restartPolicy: Never