name: Deploy to GKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GKE_CLUSTER: kanni-ai-poc
  GKE_REGION: europe-west1
  DEPLOYMENT_NAME: kanni-ai-app
  IMAGE: kanni-ai
  NAMESPACE: kanni-ai
  USE_GKE_GCLOUD_AUTH_PLUGIN: True

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test

    - name: Inject version and commit info
      run: node scripts/inject-version.js "1.0.0" "${{ github.sha }}"

    - name: Build application
      env:
        INTERESTS: ${{ secrets.INTERESTS }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: npm run build

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Install GKE gcloud auth plugin
      run: |-
        gcloud components install gke-gcloud-auth-plugin

    - name: Configure Docker to use gcloud as a credential helper
      run: |-
        gcloud --quiet auth configure-docker

    - name: Get the GKE credentials
      run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION" --project "${{ secrets.GCP_PROJECT_ID }}"

    - name: Debug secrets availability
      run: |-
        echo "Checking secrets availability:"
        echo "SUPABASE_URL exists: ${{ secrets.SUPABASE_URL != '' }}"
        echo "SUPABASE_ANON_KEY exists: ${{ secrets.SUPABASE_ANON_KEY != '' }}"
        echo "INTERESTS exists: ${{ secrets.INTERESTS != '' }}"

    - name: Build the Docker image
      run: |-
        docker build \
          --build-arg SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
          --build-arg SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}" \
          --build-arg INTERESTS="${{ secrets.INTERESTS }}" \
          --tag "gcr.io/${{ secrets.GCP_PROJECT_ID }}/$IMAGE:$GITHUB_SHA" \
          --tag "gcr.io/${{ secrets.GCP_PROJECT_ID }}/$IMAGE:latest" \
          .

    - name: Publish the Docker image to GCR
      run: |-
        docker push "gcr.io/${{ secrets.GCP_PROJECT_ID }}/$IMAGE:$GITHUB_SHA"
        docker push "gcr.io/${{ secrets.GCP_PROJECT_ID }}/$IMAGE:latest"

    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Deploy
      run: |-
        # Replace the image name in the k8s template with commit SHA
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/${{ secrets.GCP_PROJECT_ID }}/$IMAGE:$GITHUB_SHA
        
        # Generate timestamp for forced restart
        RESTART_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Apply the deployment with restart annotation and updated image
        ./kustomize build . | \
          sed "s/GRAFANA_PROMETHEUS_TOKEN_PLACEHOLDER/${{ secrets.GRAFANA_PROMETHEUS_TOKEN }}/g" | \
          sed "s/GRAFANA_LOKI_TOKEN_PLACEHOLDER/${{ secrets.GRAFANA_LOKI_TOKEN }}/g" | \
          sed "s/placeholder-timestamp/$RESTART_TIME/g" | \
          kubectl apply -f -
        
        # Force restart the deployment to ensure new pods are created with new image
        kubectl rollout restart deployment/$DEPLOYMENT_NAME -n $NAMESPACE
        
        # Wait for rollout to complete
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE --timeout=300s
        
        # Verify deployment
        echo "Deployment completed. Current status:"
        kubectl get pods -n $NAMESPACE -l app=kanni-ai -o wide
        echo "Image being used:"
        kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}'
        echo ""
        kubectl get services -o wide -n $NAMESPACE